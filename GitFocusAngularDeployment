pipeline {
  environment {
    registry = "792429589635.dkr.ecr.ap-south-1.amazonaws.com/gitfocus"
    registryCredential = 'eyJwYXlsb2FkIjoiQTVaM3NBdnJ3RStMUjFHRGFhTlNYZXRzbzVzVU53Z1N3QkVnVUZwVnJTNW9aTEFOOWRtU0p5eDNzQWt3ek5DUTZNbU9QMWlGS3E4eFFSTnFzOHhvdGZEVDNoNlRCL1hWeXkya2R2ZG02UXZjMzZ5OVF6RjlOSXpUOS83b1hMcVJKck9SNU1yZWlzbU5uOEZXK2U3ZldPN1puNitiTFo4MWFjTTlWaUtGd2VTWUNrU1NTdVhka3NJK0lhUUZKNitVQ3ZHS1ZhRWtFT2d5WVZTY1cyMWFQdERNb01ONVZLRFRlUHdqY2RrbGo5b1V5T2kxN3VXTDBLNEp1c1lOVzZ4Z3lSLzY5UWJoUnlXc2ZHajZqYitYekhYWXFjQS83SzNEc0trOHcvWW9CZmJBb0NPTnFTa21yNUdQUnBDM2xHMy9lRktQWlF0S3pkUC80OHJIOGMyMXNia0NZcVZxRFpSRURLK21vT0ZLb0t4UU1GbTVlRFpENXBma0RCczQxTmYwenc3Q2RnamQzVnpaSjBHa3QyWU1PNVVKSmpucHIwOEV4bkptbWx6em5OK2hweDRRbWNGcGJWQWdEWnJLMXVYM2ZJVy85WE5vVDdQT1liMTY2eUtqeDRGdmZtNG1QQ25HUFBva3ZnSGtseHE2L2FQUjQ4Z2c1ZU9GYUc4QVhVU0JpR3hPRFVSU2pKMGluNTdDdUtVZkFsK1R4NUFlRU9FTDZOZWdxLy9tUEJFVy9DcFlScEYxMFFLQWtXQkZBQjdQMi9aMXdCZnl2OGxZWHo5UVkwVGhIWnBWbGk3blZkd2ZBODN1VFMvSmlxRGcvaTVvclVmMmZPT0hrdGUxT1hPQnJPZUZwamJlZTFyMERlZGt6N0w5Vzh3VVBZdEwxSURsRTFXT3VTMHZSM1ZLSVc5NG9CY2R1WGgyZTdoS2tIMXJDcXFnak1pbUhidlZPcXNmeXRoeDFJQzhneHBxTTEwRUtOS1lhMFdTU0toS3E1N2tYSENud21ZNTh1bmNuMnhoVXJmbkdXc1ZrbUE0QTkranhsaGFNT3lJTG02eWFDZElMM3FuMUJ2ckNlUDBzdVdVd0NRTTd0RjFPWWJ2RWl3YU5JcFhNRmx1dG1ZMTdiSVFLRXgzZkJyeDlwcTdYczhDbUxGMkkzT2dQNS85OHM0anZtR0E0M3g3VTczU3hZbDRaVk5IWjlGT2d2L3h5ajVpUlJ4YWhXT3F0RU9POFNvVERURUtQSkw1dloxYzErN0F0ZkRZODJDSFQwN045RGNDaGlOQ1pRN1VVR2VMcGZUZTlDNVpuZUJ3RzBiWjNneGxkSXFITnBMdlpGZUFGWGZoS3FpYkplYnFvYlAwUjFTVXpVY3NUMzBXaHMyUzh0YmhrUVY2L1FjaVZUU2NMN3AwejlnazF1WkFkWFliTHl5SkpIL21jTTJad3RSQU41SHVKbzlwczk4RFZ2a2hwWjh4SG4wWUVUa0N6UDYrS1VaekluNDYxaVJZd216djRsMnpIRk5lWjFzTFlEUHRJR2YxaS8ramhNRmlzVC9rcStOVjQ2QT0iLCJkYXRha2V5IjoiQVFJQkFIaUhXYVlUblJVV0NibnorN0x2TUcrQVB2VEh6SGxCVVE5RnFFbVYyNkJkd3dGMkUzbnU4RUt4ckphMVhUa3VCS1FWQUFBQWZqQjhCZ2txaGtpRzl3MEJCd2FnYnpCdEFnRUFNR2dHQ1NxR1NJYjNEUUVIQVRBZUJnbGdoa2dCWlFNRUFTNHdFUVFNU2YveXlGWlh2MVZidFRseUFnRVFnRHVMRU1kSlJtUkFsZ05sZDY1VUUxdnR2Mjc0cU5QVnR1OUIxZ1RVY05Hb3pBZUliWnVlVjRoMWExMTR2bjNjdkVnTWFaQ2JqQmhnRHhIRXRnPT0iLCJ2ZXJzaW9uIjoiMiIsInR5cGUiOiJEQVRBX0tFWSIsImV4cGlyYXRpb24iOjE2MDY1MDExMjZ9
'
    dockerImage = ''
  }
 
  agent any
  tools { 
    maven 'maven 3.6.3' 
  }	
 
  stages {
stage('Initialize'){
            steps {		    
                    nodejs('DAGNodeJS'){
                          sh 'npm install'
                          sh 'cp  index.d.ts ./node_modules/@types/chart.js'
                    }
            }
        }
        stage('Build') {
            steps {
                    nodejs('DAGNodeJS'){
                        sh 'npm run-script build'
                    }
            }
        }
	stage ("Code Analysis") {	   
            steps {
	            script {
	                      def scannerHome=tool 'DAGSonarQubeScanner'
		              withSonarQubeEnv('SonarQube') {    
	                         sh 'pwd'  
	                         //sh 'cp sonar-scanner.properties /var/jenkins_home/sonar-scanner-4.4.0.2170-linux/conf'
		                 //sh '/var/jenkins_home/sonar-scanner-4.4.0.2170-linux/bin/sonar-scanner'
				 sh "cp sonar-scanner.properties ${scannerHome}/conf"
		                 sh "${scannerHome}/bin/sonar-scanner"
	                      }
		    }
            }
        }
	stage("Quality Check"){
            steps{
	                script{
      			               def qualitygate = waitForQualityGate()
      			               if (qualitygate.status != "OK") {
         		                   error "Pipeline aborted due to quality gate coverage failure: ${qualitygate.status}"
			                     }
	     	          }
            }
        }
		        stage('Building Image') {	  
            steps {
	            sh 'pwd'
	            sh 'ls -l'
                   script {
                            dockerImage = docker.build registry + ":$BUILD_NUMBER"
                            //dockerImage = docker.build registry + ":1.1"
                   }
            }           
        }	
        stage('Clean Up'){
            steps {
                sh 'rm -r src output  e2e'
                sh 'rm -f browserslist tsconfig.app.json README.md tsconfig.json angular.json  tsconfig.spec.json karma.conf.js  tslint.json index.d.ts'
            }
        }	
        stage('Push to ECR') {
            steps{
                  script {
                            docker.withRegistry( '792429589635.dkr.ecr.ap-south-1.amazonaws.com/gitfocus', registryCredential ) {
                            dockerImage.push();
			    dockerImage.push()+ ':${BUILD_NUMBER}'
                           }
                  }
             }
        }
         /* stage('Approval') {            
               steps {
                    script {
		                          timeout (time: 10, unit: 'MINUTES') {
                                      def deploymentDelay = input id: 'Deploy', message: 'Push Image to DockerHub?', submitter: 'admin', parameters: [choice(choices: ['0', '1', '2', '3'], description: 'Hours to delay deployment?', name: 'deploymentDelay')]
                                     sleep time: deploymentDelay.toInteger(), unit: 'HOURS'
		                          }
                     }
                }    
           } 
           stage('Deploy in Cluster') {
            steps {
                 script {
                     withCredentials([sshUserPrivateKey(credentialsId: 'AWS_Gitfocus_Key', keyFileVariable: 'keyFile', passphraseVariable: '', usernameVariable: 'ubuntu')]) {
                     echo keyFile
                     print 'keyFile=' + keyFile
                     print 'keyFileContent=' + readFile(keyFile)
                     def remote = [name: 'GITFocusCICD', host: 'ec2-65-0-131-53.ap-south-1.compute.amazonaws.com', identityFile : keyFile, user: 'ubuntu', allowAnyHosts: true]
                     sh 'ls -l'
                     sshCommand remote: remote, command: "ls -l"   
                     sshPut remote: remote, from: './AngularDeployment.yaml', into: './gitfocusapp'
                     sshPut remote: remote, from: './AngularLoadBalService.yaml', into: './gitfocusapp'
                     sshCommand remote: remote, command: "kubectl create -f ./gitfocusapp/AngularDeployment.yaml"
                     sshCommand remote: remote, command: "kubectl create -f ./gitfocusapp/AngularLoadBalService.yaml"
		     sshCommand remote: remote, command: "kubectl set image deployment/gitui-deployment gitui-container=priya2802/gitfocus_service_kube:$BUILD_NUMBER"
                     }
                 }
            }
        }*/
   }
    post {
          always {
		  cleanWs()
	           /*emailext body:'''${DEFAULT_CONTENT}''',
                           recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                           subject:''' ${DEFAULT_SUBJECT}'''*/
         }  
   }
}
